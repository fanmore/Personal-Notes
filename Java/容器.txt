* 何为容器（Collection）
	容器，也叫集合。
	数组就是一种容器，可以在其中放置对象或基本类型数据。

* 数组的优势
  是一种简单的线性序列，可以快速的访问数组元素，效率高。
  如果从效率和类型检查的角度将，数组是最好的容器。

* 数组的劣势
  不够灵活，容量需要事先定义，不能随着需求的变化而扩容。

* 容器的分类
	List：有顺序，可重复。（HashSet）
	Set：无顺序，不可重复。(ArrayList，LinkedList)
	Map：键值对。(HashMap)

* 泛型
	建立类型安全的集合，也就是在集合上贴标签，使得集合中的数据类型一致。
	泛型的本质就是“数据类型的参数化”，可以把泛型理解为数据类型的一个占位符（形式参数），及告诉编译器，在调用泛型时必须传入实际类型。

* Collection
	有两个接口：List、Set。

常用方法：
	* int size()：返回容器中元素的个数。
	* boolean isEmpty()：判断容器是否为空，是为true。
	* add()：想容器中添加元素。
	* remove()：移除容器中的元素。
		注意不是删除对象，因为容器中存储的是对象的地址，而remove()删除了引用的地址，但并没有删除对象。
	* clear()：移除容器中的所有元素。
	* toArray()：转化为一个Object数组。
	* contains()：容器中是否包含某个元素。

	因为List和Set都是继承了Collection的接口，所以Collection的方法List和Set都有。

* List
	常用方法（两个集合间的操作）：
		* addAll()：增加另一个集合中的所有元素到本集合中。
		* removeAll()：删除本集合中和另一个集合共有的元素。
		* retainAll()：保留本集合和另一个集合共有的元素，其余删除。
		* containsAll()：本集合中是否包含了另一个元素中的所有元素，是为true。

	List接口常用的实现类有3个：
		* ArrayList
		* LinkedList
		* Vector

* ArrayList
	ArrayList底层是用数组实现的存储，特点是查询效率高，增删效率低，线程不安全，我们一般使用它。
	常用方法：
		* add(a, b)：在a位置插入b对象，同时其余对象往后移。
		* remove(a)：移除a位置的对象，其余对象往前移。
		* set(a, b)：用b对象替换a位置对象，其余对象位置不动。
		* get(a)：获取a位置的对象。

* LinkedList
	LinkedList底层用双向链表实现的存储，特点是查询效率低，增删效率高，线程不安全。

